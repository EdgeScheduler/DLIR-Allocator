// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpcinterface.proto

#include "rpcinterface.pb.h"
#include "rpcinterface.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace RPCInterface {

static const char* DLIRService_method_names[] = {
  "/RPCInterface.DLIRService/DoInference",
  "/RPCInterface.DLIRService/GetIOShape",
  "/RPCInterface.DLIRService/GetService",
};

std::unique_ptr< DLIRService::Stub> DLIRService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DLIRService::Stub> stub(new DLIRService::Stub(channel, options));
  return stub;
}

DLIRService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DoInference_(DLIRService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIOShape_(DLIRService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetService_(DLIRService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DLIRService::Stub::DoInference(::grpc::ClientContext* context, const ::RPCInterface::RequestInference& request, ::RPCInterface::ReplyInference* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RPCInterface::RequestInference, ::RPCInterface::ReplyInference, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoInference_, context, request, response);
}

void DLIRService::Stub::async::DoInference(::grpc::ClientContext* context, const ::RPCInterface::RequestInference* request, ::RPCInterface::ReplyInference* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RPCInterface::RequestInference, ::RPCInterface::ReplyInference, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoInference_, context, request, response, std::move(f));
}

void DLIRService::Stub::async::DoInference(::grpc::ClientContext* context, const ::RPCInterface::RequestInference* request, ::RPCInterface::ReplyInference* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoInference_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RPCInterface::ReplyInference>* DLIRService::Stub::PrepareAsyncDoInferenceRaw(::grpc::ClientContext* context, const ::RPCInterface::RequestInference& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RPCInterface::ReplyInference, ::RPCInterface::RequestInference, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoInference_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RPCInterface::ReplyInference>* DLIRService::Stub::AsyncDoInferenceRaw(::grpc::ClientContext* context, const ::RPCInterface::RequestInference& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoInferenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DLIRService::Stub::GetIOShape(::grpc::ClientContext* context, const ::RPCInterface::RequestIOShape& request, ::RPCInterface::ReplyIOShape* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RPCInterface::RequestIOShape, ::RPCInterface::ReplyIOShape, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIOShape_, context, request, response);
}

void DLIRService::Stub::async::GetIOShape(::grpc::ClientContext* context, const ::RPCInterface::RequestIOShape* request, ::RPCInterface::ReplyIOShape* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RPCInterface::RequestIOShape, ::RPCInterface::ReplyIOShape, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOShape_, context, request, response, std::move(f));
}

void DLIRService::Stub::async::GetIOShape(::grpc::ClientContext* context, const ::RPCInterface::RequestIOShape* request, ::RPCInterface::ReplyIOShape* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOShape_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RPCInterface::ReplyIOShape>* DLIRService::Stub::PrepareAsyncGetIOShapeRaw(::grpc::ClientContext* context, const ::RPCInterface::RequestIOShape& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RPCInterface::ReplyIOShape, ::RPCInterface::RequestIOShape, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIOShape_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RPCInterface::ReplyIOShape>* DLIRService::Stub::AsyncGetIOShapeRaw(::grpc::ClientContext* context, const ::RPCInterface::RequestIOShape& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIOShapeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DLIRService::Stub::GetService(::grpc::ClientContext* context, const ::RPCInterface::RequestInfo& request, ::RPCInterface::ReplyInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RPCInterface::RequestInfo, ::RPCInterface::ReplyInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetService_, context, request, response);
}

void DLIRService::Stub::async::GetService(::grpc::ClientContext* context, const ::RPCInterface::RequestInfo* request, ::RPCInterface::ReplyInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RPCInterface::RequestInfo, ::RPCInterface::ReplyInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetService_, context, request, response, std::move(f));
}

void DLIRService::Stub::async::GetService(::grpc::ClientContext* context, const ::RPCInterface::RequestInfo* request, ::RPCInterface::ReplyInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RPCInterface::ReplyInfo>* DLIRService::Stub::PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::RPCInterface::RequestInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RPCInterface::ReplyInfo, ::RPCInterface::RequestInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RPCInterface::ReplyInfo>* DLIRService::Stub::AsyncGetServiceRaw(::grpc::ClientContext* context, const ::RPCInterface::RequestInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

DLIRService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DLIRService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DLIRService::Service, ::RPCInterface::RequestInference, ::RPCInterface::ReplyInference, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DLIRService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RPCInterface::RequestInference* req,
             ::RPCInterface::ReplyInference* resp) {
               return service->DoInference(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DLIRService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DLIRService::Service, ::RPCInterface::RequestIOShape, ::RPCInterface::ReplyIOShape, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DLIRService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RPCInterface::RequestIOShape* req,
             ::RPCInterface::ReplyIOShape* resp) {
               return service->GetIOShape(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DLIRService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DLIRService::Service, ::RPCInterface::RequestInfo, ::RPCInterface::ReplyInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DLIRService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RPCInterface::RequestInfo* req,
             ::RPCInterface::ReplyInfo* resp) {
               return service->GetService(ctx, req, resp);
             }, this)));
}

DLIRService::Service::~Service() {
}

::grpc::Status DLIRService::Service::DoInference(::grpc::ServerContext* context, const ::RPCInterface::RequestInference* request, ::RPCInterface::ReplyInference* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DLIRService::Service::GetIOShape(::grpc::ServerContext* context, const ::RPCInterface::RequestIOShape* request, ::RPCInterface::ReplyIOShape* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DLIRService::Service::GetService(::grpc::ServerContext* context, const ::RPCInterface::RequestInfo* request, ::RPCInterface::ReplyInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RPCInterface

