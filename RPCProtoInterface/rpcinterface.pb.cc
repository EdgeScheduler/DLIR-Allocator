// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcinterface.proto

#include "rpcinterface.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace RPCInterface {
PROTOBUF_CONSTEXPR RequestInference::RequestInference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modelname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestInferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestInferenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestInferenceDefaultTypeInternal() {}
  union {
    RequestInference _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestInferenceDefaultTypeInternal _RequestInference_default_instance_;
PROTOBUF_CONSTEXPR ReplyInference::ReplyInference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.info_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplyInferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyInferenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyInferenceDefaultTypeInternal() {}
  union {
    ReplyInference _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyInferenceDefaultTypeInternal _ReplyInference_default_instance_;
PROTOBUF_CONSTEXPR RequestInfo::RequestInfo(
    ::_pbi::ConstantInitialized) {}
struct RequestInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestInfoDefaultTypeInternal() {}
  union {
    RequestInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
PROTOBUF_CONSTEXPR RequestIOShape::RequestIOShape(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modelname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestIOShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestIOShapeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestIOShapeDefaultTypeInternal() {}
  union {
    RequestIOShape _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestIOShapeDefaultTypeInternal _RequestIOShape_default_instance_;
PROTOBUF_CONSTEXPR ReplyIOShape::ReplyIOShape(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.outputs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplyIOShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyIOShapeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyIOShapeDefaultTypeInternal() {}
  union {
    ReplyIOShape _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyIOShapeDefaultTypeInternal _ReplyIOShape_default_instance_;
PROTOBUF_CONSTEXPR ReplyInfo::ReplyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modelnames_)*/{}
  , /*decltype(_impl_.ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyInfoDefaultTypeInternal() {}
  union {
    ReplyInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyInfoDefaultTypeInternal _ReplyInfo_default_instance_;
}  // namespace RPCInterface
static ::_pb::Metadata file_level_metadata_rpcinterface_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_rpcinterface_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_rpcinterface_2eproto = nullptr;
const ::uint32_t TableStruct_rpcinterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RPCInterface::RequestInference, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RPCInterface::RequestInference, _impl_.modelname_),
    PROTOBUF_FIELD_OFFSET(::RPCInterface::RequestInference, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInference, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInference, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInference, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInference, _impl_.info_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RPCInterface::RequestInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RPCInterface::RequestIOShape, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RPCInterface::RequestIOShape, _impl_.modelname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyIOShape, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyIOShape, _impl_.inputs_),
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyIOShape, _impl_.outputs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInfo, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInfo, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::RPCInterface::ReplyInfo, _impl_.modelnames_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::RPCInterface::RequestInference)},
        { 10, -1, -1, sizeof(::RPCInterface::ReplyInference)},
        { 21, -1, -1, sizeof(::RPCInterface::RequestInfo)},
        { 29, -1, -1, sizeof(::RPCInterface::RequestIOShape)},
        { 38, -1, -1, sizeof(::RPCInterface::ReplyIOShape)},
        { 48, -1, -1, sizeof(::RPCInterface::ReplyInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::RPCInterface::_RequestInference_default_instance_._instance,
    &::RPCInterface::_ReplyInference_default_instance_._instance,
    &::RPCInterface::_RequestInfo_default_instance_._instance,
    &::RPCInterface::_RequestIOShape_default_instance_._instance,
    &::RPCInterface::_ReplyIOShape_default_instance_._instance,
    &::RPCInterface::_ReplyInfo_default_instance_._instance,
};
const char descriptor_table_protodef_rpcinterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022rpcinterface.proto\022\014RPCInterface\"3\n\020Re"
    "questInference\022\021\n\tmodelname\030\001 \001(\t\022\014\n\004dat"
    "a\030\002 \001(\t\">\n\016ReplyInference\022\016\n\006status\030\001 \001("
    "\005\022\016\n\006result\030\002 \001(\t\022\014\n\004info\030\003 \001(\t\"\r\n\013Reque"
    "stInfo\"#\n\016RequestIOShape\022\021\n\tmodelname\030\001 "
    "\001(\t\"/\n\014ReplyIOShape\022\016\n\006inputs\030\001 \001(\t\022\017\n\007o"
    "utputs\030\002 \001(\t\"9\n\tReplyInfo\022\n\n\002ip\030\001 \001(\t\022\014\n"
    "\004port\030\002 \001(\005\022\022\n\nmodelnames\030\003 \003(\t2\344\001\n\013DLIR"
    "Service\022K\n\013DoInference\022\036.RPCInterface.Re"
    "questInference\032\034.RPCInterface.ReplyInfer"
    "ence\022F\n\nGetIOShape\022\034.RPCInterface.Reques"
    "tIOShape\032\032.RPCInterface.ReplyIOShape\022@\n\n"
    "GetService\022\031.RPCInterface.RequestInfo\032\027."
    "RPCInterface.ReplyInfob\006proto3"
};
static ::absl::once_flag descriptor_table_rpcinterface_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpcinterface_2eproto = {
    false,
    false,
    550,
    descriptor_table_protodef_rpcinterface_2eproto,
    "rpcinterface.proto",
    &descriptor_table_rpcinterface_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_rpcinterface_2eproto::offsets,
    file_level_metadata_rpcinterface_2eproto,
    file_level_enum_descriptors_rpcinterface_2eproto,
    file_level_service_descriptors_rpcinterface_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpcinterface_2eproto_getter() {
  return &descriptor_table_rpcinterface_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpcinterface_2eproto(&descriptor_table_rpcinterface_2eproto);
namespace RPCInterface {
// ===================================================================

class RequestInference::_Internal {
 public:
};

RequestInference::RequestInference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RPCInterface.RequestInference)
}
RequestInference::RequestInference(const RequestInference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestInference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modelname_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modelname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_modelname().empty()) {
    _this->_impl_.modelname_.Set(from._internal_modelname(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RPCInterface.RequestInference)
}

inline void RequestInference::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.modelname_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.modelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modelname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestInference::~RequestInference() {
  // @@protoc_insertion_point(destructor:RPCInterface.RequestInference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestInference::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modelname_.Destroy();
  _impl_.data_.Destroy();
}

void RequestInference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestInference::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCInterface.RequestInference)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modelname_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string modelname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_modelname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.RequestInference.modelname"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.RequestInference.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestInference::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCInterface.RequestInference)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelname = 1;
  if (!this->_internal_modelname().empty()) {
    const std::string& _s = this->_internal_modelname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.RequestInference.modelname");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.RequestInference.data");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCInterface.RequestInference)
  return target;
}

::size_t RequestInference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCInterface.RequestInference)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modelname = 1;
  if (!this->_internal_modelname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_modelname());
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestInference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestInference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestInference::GetClassData() const { return &_class_data_; }


void RequestInference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestInference*>(&to_msg);
  auto& from = static_cast<const RequestInference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPCInterface.RequestInference)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modelname().empty()) {
    _this->_internal_set_modelname(from._internal_modelname());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestInference::CopyFrom(const RequestInference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCInterface.RequestInference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInference::IsInitialized() const {
  return true;
}

void RequestInference::InternalSwap(RequestInference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modelname_, lhs_arena,
                                       &other->_impl_.modelname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcinterface_2eproto_getter, &descriptor_table_rpcinterface_2eproto_once,
      file_level_metadata_rpcinterface_2eproto[0]);
}
// ===================================================================

class ReplyInference::_Internal {
 public:
};

ReplyInference::ReplyInference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RPCInterface.ReplyInference)
}
ReplyInference::ReplyInference(const ReplyInference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplyInference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:RPCInterface.ReplyInference)
}

inline void ReplyInference::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplyInference::~ReplyInference() {
  // @@protoc_insertion_point(destructor:RPCInterface.ReplyInference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplyInference::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
  _impl_.info_.Destroy();
}

void ReplyInference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplyInference::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCInterface.ReplyInference)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyInference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.ReplyInference.result"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.ReplyInference.info"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReplyInference::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCInterface.ReplyInference)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_status(), target);
  }

  // string result = 2;
  if (!this->_internal_result().empty()) {
    const std::string& _s = this->_internal_result();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.ReplyInference.result");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    const std::string& _s = this->_internal_info();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.ReplyInference.info");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCInterface.ReplyInference)
  return target;
}

::size_t ReplyInference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCInterface.ReplyInference)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 2;
  if (!this->_internal_result().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_result());
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_info());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplyInference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplyInference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplyInference::GetClassData() const { return &_class_data_; }


void ReplyInference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplyInference*>(&to_msg);
  auto& from = static_cast<const ReplyInference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPCInterface.ReplyInference)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplyInference::CopyFrom(const ReplyInference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCInterface.ReplyInference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyInference::IsInitialized() const {
  return true;
}

void ReplyInference::InternalSwap(ReplyInference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_, lhs_arena,
                                       &other->_impl_.result_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.info_, lhs_arena,
                                       &other->_impl_.info_, rhs_arena);

  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyInference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcinterface_2eproto_getter, &descriptor_table_rpcinterface_2eproto_once,
      file_level_metadata_rpcinterface_2eproto[1]);
}
// ===================================================================

class RequestInfo::_Internal {
 public:
};

RequestInfo::RequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:RPCInterface.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestInfo* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RPCInterface.RequestInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcinterface_2eproto_getter, &descriptor_table_rpcinterface_2eproto_once,
      file_level_metadata_rpcinterface_2eproto[2]);
}
// ===================================================================

class RequestIOShape::_Internal {
 public:
};

RequestIOShape::RequestIOShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RPCInterface.RequestIOShape)
}
RequestIOShape::RequestIOShape(const RequestIOShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestIOShape* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modelname_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modelname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_modelname().empty()) {
    _this->_impl_.modelname_.Set(from._internal_modelname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RPCInterface.RequestIOShape)
}

inline void RequestIOShape::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.modelname_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.modelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.modelname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestIOShape::~RequestIOShape() {
  // @@protoc_insertion_point(destructor:RPCInterface.RequestIOShape)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestIOShape::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modelname_.Destroy();
}

void RequestIOShape::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestIOShape::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCInterface.RequestIOShape)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modelname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestIOShape::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string modelname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_modelname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.RequestIOShape.modelname"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestIOShape::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCInterface.RequestIOShape)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelname = 1;
  if (!this->_internal_modelname().empty()) {
    const std::string& _s = this->_internal_modelname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.RequestIOShape.modelname");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCInterface.RequestIOShape)
  return target;
}

::size_t RequestIOShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCInterface.RequestIOShape)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modelname = 1;
  if (!this->_internal_modelname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_modelname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestIOShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestIOShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestIOShape::GetClassData() const { return &_class_data_; }


void RequestIOShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestIOShape*>(&to_msg);
  auto& from = static_cast<const RequestIOShape&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPCInterface.RequestIOShape)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modelname().empty()) {
    _this->_internal_set_modelname(from._internal_modelname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestIOShape::CopyFrom(const RequestIOShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCInterface.RequestIOShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIOShape::IsInitialized() const {
  return true;
}

void RequestIOShape::InternalSwap(RequestIOShape* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.modelname_, lhs_arena,
                                       &other->_impl_.modelname_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestIOShape::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcinterface_2eproto_getter, &descriptor_table_rpcinterface_2eproto_once,
      file_level_metadata_rpcinterface_2eproto[3]);
}
// ===================================================================

class ReplyIOShape::_Internal {
 public:
};

ReplyIOShape::ReplyIOShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RPCInterface.ReplyIOShape)
}
ReplyIOShape::ReplyIOShape(const ReplyIOShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplyIOShape* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_) {}

    , decltype(_impl_.outputs_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inputs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inputs().empty()) {
    _this->_impl_.inputs_.Set(from._internal_inputs(), _this->GetArenaForAllocation());
  }
  _impl_.outputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.outputs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outputs().empty()) {
    _this->_impl_.outputs_.Set(from._internal_outputs(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RPCInterface.ReplyIOShape)
}

inline void ReplyIOShape::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_) {}

    , decltype(_impl_.outputs_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inputs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.outputs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplyIOShape::~ReplyIOShape() {
  // @@protoc_insertion_point(destructor:RPCInterface.ReplyIOShape)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplyIOShape::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.Destroy();
  _impl_.outputs_.Destroy();
}

void ReplyIOShape::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplyIOShape::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCInterface.ReplyIOShape)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.ClearToEmpty();
  _impl_.outputs_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyIOShape::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inputs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.ReplyIOShape.inputs"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_outputs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.ReplyIOShape.outputs"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReplyIOShape::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCInterface.ReplyIOShape)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inputs = 1;
  if (!this->_internal_inputs().empty()) {
    const std::string& _s = this->_internal_inputs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.ReplyIOShape.inputs");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    const std::string& _s = this->_internal_outputs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.ReplyIOShape.outputs");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCInterface.ReplyIOShape)
  return target;
}

::size_t ReplyIOShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCInterface.ReplyIOShape)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inputs = 1;
  if (!this->_internal_inputs().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_inputs());
  }

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_outputs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplyIOShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplyIOShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplyIOShape::GetClassData() const { return &_class_data_; }


void ReplyIOShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplyIOShape*>(&to_msg);
  auto& from = static_cast<const ReplyIOShape&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPCInterface.ReplyIOShape)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inputs().empty()) {
    _this->_internal_set_inputs(from._internal_inputs());
  }
  if (!from._internal_outputs().empty()) {
    _this->_internal_set_outputs(from._internal_outputs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplyIOShape::CopyFrom(const ReplyIOShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCInterface.ReplyIOShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyIOShape::IsInitialized() const {
  return true;
}

void ReplyIOShape::InternalSwap(ReplyIOShape* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inputs_, lhs_arena,
                                       &other->_impl_.inputs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.outputs_, lhs_arena,
                                       &other->_impl_.outputs_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyIOShape::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcinterface_2eproto_getter, &descriptor_table_rpcinterface_2eproto_once,
      file_level_metadata_rpcinterface_2eproto[4]);
}
// ===================================================================

class ReplyInfo::_Internal {
 public:
};

ReplyInfo::ReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RPCInterface.ReplyInfo)
}
ReplyInfo::ReplyInfo(const ReplyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modelnames_){from._impl_.modelnames_}
    , decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:RPCInterface.ReplyInfo)
}

inline void ReplyInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.modelnames_){arena}
    , decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplyInfo::~ReplyInfo() {
  // @@protoc_insertion_point(destructor:RPCInterface.ReplyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplyInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modelnames_.~RepeatedPtrField();
  _impl_.ip_.Destroy();
}

void ReplyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCInterface.ReplyInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modelnames_.Clear();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.ReplyInfo.ip"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string modelnames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_modelnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "RPCInterface.ReplyInfo.modelnames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReplyInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCInterface.ReplyInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.ReplyInfo.ip");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_port(), target);
  }

  // repeated string modelnames = 3;
  for (int i = 0, n = this->_internal_modelnames_size(); i < n; ++i) {
    const auto& s = this->_internal_modelnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RPCInterface.ReplyInfo.modelnames");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCInterface.ReplyInfo)
  return target;
}

::size_t ReplyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCInterface.ReplyInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string modelnames = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.modelnames_.size());
  for (int i = 0, n = _impl_.modelnames_.size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(_impl_.modelnames_.Get(i));
  }

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplyInfo::GetClassData() const { return &_class_data_; }


void ReplyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplyInfo*>(&to_msg);
  auto& from = static_cast<const ReplyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RPCInterface.ReplyInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modelnames_.MergeFrom(from._impl_.modelnames_);
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplyInfo::CopyFrom(const ReplyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCInterface.ReplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyInfo::IsInitialized() const {
  return true;
}

void ReplyInfo::InternalSwap(ReplyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modelnames_.InternalSwap(&other->_impl_.modelnames_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);

  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcinterface_2eproto_getter, &descriptor_table_rpcinterface_2eproto_once,
      file_level_metadata_rpcinterface_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace RPCInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RPCInterface::RequestInference*
Arena::CreateMaybeMessage< ::RPCInterface::RequestInference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPCInterface::RequestInference >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCInterface::ReplyInference*
Arena::CreateMaybeMessage< ::RPCInterface::ReplyInference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPCInterface::ReplyInference >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCInterface::RequestInfo*
Arena::CreateMaybeMessage< ::RPCInterface::RequestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPCInterface::RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCInterface::RequestIOShape*
Arena::CreateMaybeMessage< ::RPCInterface::RequestIOShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPCInterface::RequestIOShape >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCInterface::ReplyIOShape*
Arena::CreateMaybeMessage< ::RPCInterface::ReplyIOShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPCInterface::ReplyIOShape >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCInterface::ReplyInfo*
Arena::CreateMaybeMessage< ::RPCInterface::ReplyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RPCInterface::ReplyInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
