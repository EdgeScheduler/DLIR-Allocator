// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcinterface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpcinterface_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rpcinterface_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rpcinterface_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpcinterface_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_rpcinterface_2eproto;
namespace RPCInterface {
class ReplyIOShape;
struct ReplyIOShapeDefaultTypeInternal;
extern ReplyIOShapeDefaultTypeInternal _ReplyIOShape_default_instance_;
class ReplyInference;
struct ReplyInferenceDefaultTypeInternal;
extern ReplyInferenceDefaultTypeInternal _ReplyInference_default_instance_;
class ReplyInfo;
struct ReplyInfoDefaultTypeInternal;
extern ReplyInfoDefaultTypeInternal _ReplyInfo_default_instance_;
class RequestIOShape;
struct RequestIOShapeDefaultTypeInternal;
extern RequestIOShapeDefaultTypeInternal _RequestIOShape_default_instance_;
class RequestInference;
struct RequestInferenceDefaultTypeInternal;
extern RequestInferenceDefaultTypeInternal _RequestInference_default_instance_;
class RequestInfo;
struct RequestInfoDefaultTypeInternal;
extern RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
}  // namespace RPCInterface
PROTOBUF_NAMESPACE_OPEN
template <>
::RPCInterface::ReplyIOShape* Arena::CreateMaybeMessage<::RPCInterface::ReplyIOShape>(Arena*);
template <>
::RPCInterface::ReplyInference* Arena::CreateMaybeMessage<::RPCInterface::ReplyInference>(Arena*);
template <>
::RPCInterface::ReplyInfo* Arena::CreateMaybeMessage<::RPCInterface::ReplyInfo>(Arena*);
template <>
::RPCInterface::RequestIOShape* Arena::CreateMaybeMessage<::RPCInterface::RequestIOShape>(Arena*);
template <>
::RPCInterface::RequestInference* Arena::CreateMaybeMessage<::RPCInterface::RequestInference>(Arena*);
template <>
::RPCInterface::RequestInfo* Arena::CreateMaybeMessage<::RPCInterface::RequestInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace RPCInterface {

// ===================================================================


// -------------------------------------------------------------------

class RequestInference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCInterface.RequestInference) */ {
 public:
  inline RequestInference() : RequestInference(nullptr) {}
  ~RequestInference() override;
  explicit PROTOBUF_CONSTEXPR RequestInference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestInference(const RequestInference& from);
  RequestInference(RequestInference&& from) noexcept
    : RequestInference() {
    *this = ::std::move(from);
  }

  inline RequestInference& operator=(const RequestInference& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInference& operator=(RequestInference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestInference& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestInference* internal_default_instance() {
    return reinterpret_cast<const RequestInference*>(
               &_RequestInference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestInference& a, RequestInference& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestInference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestInference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestInference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestInference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestInference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestInference& from) {
    RequestInference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestInference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RPCInterface.RequestInference";
  }
  protected:
  explicit RequestInference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelnameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string modelname = 1;
  void clear_modelname() ;
  const std::string& modelname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modelname(Arg_&& arg, Args_... args);
  std::string* mutable_modelname();
  PROTOBUF_NODISCARD std::string* release_modelname();
  void set_allocated_modelname(std::string* ptr);

  private:
  const std::string& _internal_modelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelname(
      const std::string& value);
  std::string* _internal_mutable_modelname();

  public:
  // string data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:RPCInterface.RequestInference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcinterface_2eproto;
};// -------------------------------------------------------------------

class ReplyInference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCInterface.ReplyInference) */ {
 public:
  inline ReplyInference() : ReplyInference(nullptr) {}
  ~ReplyInference() override;
  explicit PROTOBUF_CONSTEXPR ReplyInference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyInference(const ReplyInference& from);
  ReplyInference(ReplyInference&& from) noexcept
    : ReplyInference() {
    *this = ::std::move(from);
  }

  inline ReplyInference& operator=(const ReplyInference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyInference& operator=(ReplyInference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyInference& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyInference* internal_default_instance() {
    return reinterpret_cast<const ReplyInference*>(
               &_ReplyInference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReplyInference& a, ReplyInference& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyInference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyInference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyInference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyInference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyInference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyInference& from) {
    ReplyInference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyInference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RPCInterface.ReplyInference";
  }
  protected:
  explicit ReplyInference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kInfoFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string result = 2;
  void clear_result() ;
  const std::string& result() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result(Arg_&& arg, Args_... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* ptr);

  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(
      const std::string& value);
  std::string* _internal_mutable_result();

  public:
  // string info = 3;
  void clear_info() ;
  const std::string& info() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* ptr);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // int32 status = 1;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:RPCInterface.ReplyInference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcinterface_2eproto;
};// -------------------------------------------------------------------

class RequestInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:RPCInterface.RequestInfo) */ {
 public:
  inline RequestInfo() : RequestInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RequestInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestInfo(const RequestInfo& from);
  RequestInfo(RequestInfo&& from) noexcept
    : RequestInfo() {
    *this = ::std::move(from);
  }

  inline RequestInfo& operator=(const RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInfo& operator=(RequestInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestInfo* internal_default_instance() {
    return reinterpret_cast<const RequestInfo*>(
               &_RequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestInfo& a, RequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RPCInterface.RequestInfo";
  }
  protected:
  explicit RequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RPCInterface.RequestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpcinterface_2eproto;
};// -------------------------------------------------------------------

class RequestIOShape final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCInterface.RequestIOShape) */ {
 public:
  inline RequestIOShape() : RequestIOShape(nullptr) {}
  ~RequestIOShape() override;
  explicit PROTOBUF_CONSTEXPR RequestIOShape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestIOShape(const RequestIOShape& from);
  RequestIOShape(RequestIOShape&& from) noexcept
    : RequestIOShape() {
    *this = ::std::move(from);
  }

  inline RequestIOShape& operator=(const RequestIOShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestIOShape& operator=(RequestIOShape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestIOShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestIOShape* internal_default_instance() {
    return reinterpret_cast<const RequestIOShape*>(
               &_RequestIOShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestIOShape& a, RequestIOShape& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestIOShape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestIOShape* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestIOShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestIOShape>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestIOShape& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestIOShape& from) {
    RequestIOShape::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestIOShape* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RPCInterface.RequestIOShape";
  }
  protected:
  explicit RequestIOShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelnameFieldNumber = 1,
  };
  // string modelname = 1;
  void clear_modelname() ;
  const std::string& modelname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modelname(Arg_&& arg, Args_... args);
  std::string* mutable_modelname();
  PROTOBUF_NODISCARD std::string* release_modelname();
  void set_allocated_modelname(std::string* ptr);

  private:
  const std::string& _internal_modelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelname(
      const std::string& value);
  std::string* _internal_mutable_modelname();

  public:
  // @@protoc_insertion_point(class_scope:RPCInterface.RequestIOShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcinterface_2eproto;
};// -------------------------------------------------------------------

class ReplyIOShape final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCInterface.ReplyIOShape) */ {
 public:
  inline ReplyIOShape() : ReplyIOShape(nullptr) {}
  ~ReplyIOShape() override;
  explicit PROTOBUF_CONSTEXPR ReplyIOShape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyIOShape(const ReplyIOShape& from);
  ReplyIOShape(ReplyIOShape&& from) noexcept
    : ReplyIOShape() {
    *this = ::std::move(from);
  }

  inline ReplyIOShape& operator=(const ReplyIOShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyIOShape& operator=(ReplyIOShape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyIOShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyIOShape* internal_default_instance() {
    return reinterpret_cast<const ReplyIOShape*>(
               &_ReplyIOShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReplyIOShape& a, ReplyIOShape& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyIOShape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyIOShape* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyIOShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyIOShape>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyIOShape& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyIOShape& from) {
    ReplyIOShape::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyIOShape* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RPCInterface.ReplyIOShape";
  }
  protected:
  explicit ReplyIOShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
  };
  // string inputs = 1;
  void clear_inputs() ;
  const std::string& inputs() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inputs(Arg_&& arg, Args_... args);
  std::string* mutable_inputs();
  PROTOBUF_NODISCARD std::string* release_inputs();
  void set_allocated_inputs(std::string* ptr);

  private:
  const std::string& _internal_inputs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputs(
      const std::string& value);
  std::string* _internal_mutable_inputs();

  public:
  // string outputs = 2;
  void clear_outputs() ;
  const std::string& outputs() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outputs(Arg_&& arg, Args_... args);
  std::string* mutable_outputs();
  PROTOBUF_NODISCARD std::string* release_outputs();
  void set_allocated_outputs(std::string* ptr);

  private:
  const std::string& _internal_outputs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputs(
      const std::string& value);
  std::string* _internal_mutable_outputs();

  public:
  // @@protoc_insertion_point(class_scope:RPCInterface.ReplyIOShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcinterface_2eproto;
};// -------------------------------------------------------------------

class ReplyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCInterface.ReplyInfo) */ {
 public:
  inline ReplyInfo() : ReplyInfo(nullptr) {}
  ~ReplyInfo() override;
  explicit PROTOBUF_CONSTEXPR ReplyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyInfo(const ReplyInfo& from);
  ReplyInfo(ReplyInfo&& from) noexcept
    : ReplyInfo() {
    *this = ::std::move(from);
  }

  inline ReplyInfo& operator=(const ReplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyInfo& operator=(ReplyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyInfo* internal_default_instance() {
    return reinterpret_cast<const ReplyInfo*>(
               &_ReplyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReplyInfo& a, ReplyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyInfo& from) {
    ReplyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RPCInterface.ReplyInfo";
  }
  protected:
  explicit ReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelnamesFieldNumber = 3,
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // repeated string modelnames = 3;
  int modelnames_size() const;
  private:
  int _internal_modelnames_size() const;

  public:
  void clear_modelnames() ;
  const std::string& modelnames(int index) const;
  std::string* mutable_modelnames(int index);
  void set_modelnames(int index, const std::string& value);
  void set_modelnames(int index, std::string&& value);
  void set_modelnames(int index, const char* value);
  void set_modelnames(int index, const char* value, std::size_t size);
  void set_modelnames(int index, absl::string_view value);
  std::string* add_modelnames();
  void add_modelnames(const std::string& value);
  void add_modelnames(std::string&& value);
  void add_modelnames(const char* value);
  void add_modelnames(const char* value, std::size_t size);
  void add_modelnames(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& modelnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_modelnames();

  private:
  const std::string& _internal_modelnames(int index) const;
  std::string* _internal_add_modelnames();

  public:
  // string ip = 1;
  void clear_ip() ;
  const std::string& ip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:RPCInterface.ReplyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> modelnames_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcinterface_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestInference

// string modelname = 1;
inline void RequestInference::clear_modelname() {
  _impl_.modelname_.ClearToEmpty();
}
inline const std::string& RequestInference::modelname() const {
  // @@protoc_insertion_point(field_get:RPCInterface.RequestInference.modelname)
  return _internal_modelname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestInference::set_modelname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.modelname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.RequestInference.modelname)
}
inline std::string* RequestInference::mutable_modelname() {
  std::string* _s = _internal_mutable_modelname();
  // @@protoc_insertion_point(field_mutable:RPCInterface.RequestInference.modelname)
  return _s;
}
inline const std::string& RequestInference::_internal_modelname() const {
  return _impl_.modelname_.Get();
}
inline void RequestInference::_internal_set_modelname(const std::string& value) {
  ;


  _impl_.modelname_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestInference::_internal_mutable_modelname() {
  ;
  return _impl_.modelname_.Mutable( GetArenaForAllocation());
}
inline std::string* RequestInference::release_modelname() {
  // @@protoc_insertion_point(field_release:RPCInterface.RequestInference.modelname)
  return _impl_.modelname_.Release();
}
inline void RequestInference::set_allocated_modelname(std::string* value) {
  _impl_.modelname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.modelname_.IsDefault()) {
          _impl_.modelname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.RequestInference.modelname)
}

// string data = 2;
inline void RequestInference::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RequestInference::data() const {
  // @@protoc_insertion_point(field_get:RPCInterface.RequestInference.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestInference::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.RequestInference.data)
}
inline std::string* RequestInference::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:RPCInterface.RequestInference.data)
  return _s;
}
inline const std::string& RequestInference::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RequestInference::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestInference::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* RequestInference::release_data() {
  // @@protoc_insertion_point(field_release:RPCInterface.RequestInference.data)
  return _impl_.data_.Release();
}
inline void RequestInference::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.RequestInference.data)
}

// -------------------------------------------------------------------

// ReplyInference

// int32 status = 1;
inline void ReplyInference::clear_status() {
  _impl_.status_ = 0;
}
inline ::int32_t ReplyInference::status() const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyInference.status)
  return _internal_status();
}
inline void ReplyInference::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyInference.status)
}
inline ::int32_t ReplyInference::_internal_status() const {
  return _impl_.status_;
}
inline void ReplyInference::_internal_set_status(::int32_t value) {
  ;
  _impl_.status_ = value;
}

// string result = 2;
inline void ReplyInference::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ReplyInference::result() const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyInference.result)
  return _internal_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplyInference::set_result(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.result_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyInference.result)
}
inline std::string* ReplyInference::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:RPCInterface.ReplyInference.result)
  return _s;
}
inline const std::string& ReplyInference::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ReplyInference::_internal_set_result(const std::string& value) {
  ;


  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyInference::_internal_mutable_result() {
  ;
  return _impl_.result_.Mutable( GetArenaForAllocation());
}
inline std::string* ReplyInference::release_result() {
  // @@protoc_insertion_point(field_release:RPCInterface.ReplyInference.result)
  return _impl_.result_.Release();
}
inline void ReplyInference::set_allocated_result(std::string* value) {
  _impl_.result_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_.IsDefault()) {
          _impl_.result_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.ReplyInference.result)
}

// string info = 3;
inline void ReplyInference::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& ReplyInference::info() const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyInference.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplyInference::set_info(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyInference.info)
}
inline std::string* ReplyInference::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:RPCInterface.ReplyInference.info)
  return _s;
}
inline const std::string& ReplyInference::_internal_info() const {
  return _impl_.info_.Get();
}
inline void ReplyInference::_internal_set_info(const std::string& value) {
  ;


  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyInference::_internal_mutable_info() {
  ;
  return _impl_.info_.Mutable( GetArenaForAllocation());
}
inline std::string* ReplyInference::release_info() {
  // @@protoc_insertion_point(field_release:RPCInterface.ReplyInference.info)
  return _impl_.info_.Release();
}
inline void ReplyInference::set_allocated_info(std::string* value) {
  _impl_.info_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.ReplyInference.info)
}

// -------------------------------------------------------------------

// RequestInfo

// -------------------------------------------------------------------

// RequestIOShape

// string modelname = 1;
inline void RequestIOShape::clear_modelname() {
  _impl_.modelname_.ClearToEmpty();
}
inline const std::string& RequestIOShape::modelname() const {
  // @@protoc_insertion_point(field_get:RPCInterface.RequestIOShape.modelname)
  return _internal_modelname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestIOShape::set_modelname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.modelname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.RequestIOShape.modelname)
}
inline std::string* RequestIOShape::mutable_modelname() {
  std::string* _s = _internal_mutable_modelname();
  // @@protoc_insertion_point(field_mutable:RPCInterface.RequestIOShape.modelname)
  return _s;
}
inline const std::string& RequestIOShape::_internal_modelname() const {
  return _impl_.modelname_.Get();
}
inline void RequestIOShape::_internal_set_modelname(const std::string& value) {
  ;


  _impl_.modelname_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestIOShape::_internal_mutable_modelname() {
  ;
  return _impl_.modelname_.Mutable( GetArenaForAllocation());
}
inline std::string* RequestIOShape::release_modelname() {
  // @@protoc_insertion_point(field_release:RPCInterface.RequestIOShape.modelname)
  return _impl_.modelname_.Release();
}
inline void RequestIOShape::set_allocated_modelname(std::string* value) {
  _impl_.modelname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.modelname_.IsDefault()) {
          _impl_.modelname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.RequestIOShape.modelname)
}

// -------------------------------------------------------------------

// ReplyIOShape

// string inputs = 1;
inline void ReplyIOShape::clear_inputs() {
  _impl_.inputs_.ClearToEmpty();
}
inline const std::string& ReplyIOShape::inputs() const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyIOShape.inputs)
  return _internal_inputs();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplyIOShape::set_inputs(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.inputs_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyIOShape.inputs)
}
inline std::string* ReplyIOShape::mutable_inputs() {
  std::string* _s = _internal_mutable_inputs();
  // @@protoc_insertion_point(field_mutable:RPCInterface.ReplyIOShape.inputs)
  return _s;
}
inline const std::string& ReplyIOShape::_internal_inputs() const {
  return _impl_.inputs_.Get();
}
inline void ReplyIOShape::_internal_set_inputs(const std::string& value) {
  ;


  _impl_.inputs_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyIOShape::_internal_mutable_inputs() {
  ;
  return _impl_.inputs_.Mutable( GetArenaForAllocation());
}
inline std::string* ReplyIOShape::release_inputs() {
  // @@protoc_insertion_point(field_release:RPCInterface.ReplyIOShape.inputs)
  return _impl_.inputs_.Release();
}
inline void ReplyIOShape::set_allocated_inputs(std::string* value) {
  _impl_.inputs_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inputs_.IsDefault()) {
          _impl_.inputs_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.ReplyIOShape.inputs)
}

// string outputs = 2;
inline void ReplyIOShape::clear_outputs() {
  _impl_.outputs_.ClearToEmpty();
}
inline const std::string& ReplyIOShape::outputs() const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyIOShape.outputs)
  return _internal_outputs();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplyIOShape::set_outputs(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.outputs_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyIOShape.outputs)
}
inline std::string* ReplyIOShape::mutable_outputs() {
  std::string* _s = _internal_mutable_outputs();
  // @@protoc_insertion_point(field_mutable:RPCInterface.ReplyIOShape.outputs)
  return _s;
}
inline const std::string& ReplyIOShape::_internal_outputs() const {
  return _impl_.outputs_.Get();
}
inline void ReplyIOShape::_internal_set_outputs(const std::string& value) {
  ;


  _impl_.outputs_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyIOShape::_internal_mutable_outputs() {
  ;
  return _impl_.outputs_.Mutable( GetArenaForAllocation());
}
inline std::string* ReplyIOShape::release_outputs() {
  // @@protoc_insertion_point(field_release:RPCInterface.ReplyIOShape.outputs)
  return _impl_.outputs_.Release();
}
inline void ReplyIOShape::set_allocated_outputs(std::string* value) {
  _impl_.outputs_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outputs_.IsDefault()) {
          _impl_.outputs_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.ReplyIOShape.outputs)
}

// -------------------------------------------------------------------

// ReplyInfo

// string ip = 1;
inline void ReplyInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ReplyInfo::ip() const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyInfo.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplyInfo::set_ip(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyInfo.ip)
}
inline std::string* ReplyInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:RPCInterface.ReplyInfo.ip)
  return _s;
}
inline const std::string& ReplyInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ReplyInfo::_internal_set_ip(const std::string& value) {
  ;


  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyInfo::_internal_mutable_ip() {
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* ReplyInfo::release_ip() {
  // @@protoc_insertion_point(field_release:RPCInterface.ReplyInfo.ip)
  return _impl_.ip_.Release();
}
inline void ReplyInfo::set_allocated_ip(std::string* value) {
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RPCInterface.ReplyInfo.ip)
}

// int32 port = 2;
inline void ReplyInfo::clear_port() {
  _impl_.port_ = 0;
}
inline ::int32_t ReplyInfo::port() const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyInfo.port)
  return _internal_port();
}
inline void ReplyInfo::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyInfo.port)
}
inline ::int32_t ReplyInfo::_internal_port() const {
  return _impl_.port_;
}
inline void ReplyInfo::_internal_set_port(::int32_t value) {
  ;
  _impl_.port_ = value;
}

// repeated string modelnames = 3;
inline int ReplyInfo::_internal_modelnames_size() const {
  return _impl_.modelnames_.size();
}
inline int ReplyInfo::modelnames_size() const {
  return _internal_modelnames_size();
}
inline void ReplyInfo::clear_modelnames() {
  _impl_.modelnames_.Clear();
}
inline std::string* ReplyInfo::add_modelnames() {
  std::string* _s = _internal_add_modelnames();
  // @@protoc_insertion_point(field_add_mutable:RPCInterface.ReplyInfo.modelnames)
  return _s;
}
inline const std::string& ReplyInfo::_internal_modelnames(int index) const {
  return _impl_.modelnames_.Get(index);
}
inline const std::string& ReplyInfo::modelnames(int index) const {
  // @@protoc_insertion_point(field_get:RPCInterface.ReplyInfo.modelnames)
  return _internal_modelnames(index);
}
inline std::string* ReplyInfo::mutable_modelnames(int index) {
  // @@protoc_insertion_point(field_mutable:RPCInterface.ReplyInfo.modelnames)
  return _impl_.modelnames_.Mutable(index);
}
inline void ReplyInfo::set_modelnames(int index, const std::string& value) {
  _impl_.modelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::set_modelnames(int index, std::string&& value) {
  _impl_.modelnames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::set_modelnames(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.modelnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::set_modelnames(int index, const char* value,
                              std::size_t size) {
  _impl_.modelnames_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::set_modelnames(int index, absl::string_view value) {
  _impl_.modelnames_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:RPCInterface.ReplyInfo.modelnames)
}
inline std::string* ReplyInfo::_internal_add_modelnames() { return _impl_.modelnames_.Add(); }
inline void ReplyInfo::add_modelnames(const std::string& value) {
  _impl_.modelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::add_modelnames(std::string&& value) {
  _impl_.modelnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::add_modelnames(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.modelnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::add_modelnames(const char* value, std::size_t size) {
  _impl_.modelnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RPCInterface.ReplyInfo.modelnames)
}
inline void ReplyInfo::add_modelnames(absl::string_view value) {
  _impl_.modelnames_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:RPCInterface.ReplyInfo.modelnames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReplyInfo::modelnames() const {
  // @@protoc_insertion_point(field_list:RPCInterface.ReplyInfo.modelnames)
  return _impl_.modelnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ReplyInfo::mutable_modelnames() {
  // @@protoc_insertion_point(field_mutable_list:RPCInterface.ReplyInfo.modelnames)
  return &_impl_.modelnames_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace RPCInterface


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rpcinterface_2eproto_2epb_2eh
